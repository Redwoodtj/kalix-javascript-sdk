// Copyright 2019 Lightbend Inc.

syntax = "proto3";

package customer.view;

import "customer_domain.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "akkaserverless/annotations.proto";

// tag::service[]
service CustomerByName {
  rpc UpdateCustomer(domain.CustomerState) returns (domain.CustomerState) { // <1>
    option (akkaserverless.method).eventing.in = { // <2>
      value_entity: "customers"
    };
    option (akkaserverless.method).view.update = { // <3>
      table: "customers"
    };
  }

  rpc GetCustomers(ByNameRequest) returns (stream domain.CustomerState) { // <4>
    option (akkaserverless.method).view.query = { // <5>
      query: "SELECT * FROM customers WHERE name = :customer_name"
    };
  }
}

message ByNameRequest {
  string customer_name = 1;
}
// end::service[]

service CustomerByEmail {
  rpc UpdateCustomer(domain.CustomerState) returns (domain.CustomerState) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "customers"
    };
    option (akkaserverless.method).view.update = {
      table: "customers"
    };
  }

  // tag::unary[]
  rpc GetCustomer(ByEmailRequest) returns (domain.CustomerState) { // <1>
    option (akkaserverless.method).view.query = {
      query: "SELECT * FROM customers WHERE email = :email"
    };
  }
  // end::unary[]
}

message ByEmailRequest {
  string email = 1;
}

// tag::summary[]
message CustomerSummary {
  string id = 1;
  string name = 2;
}

service CustomerSummaryByName {
  rpc GetCustomers(ByNameRequest) returns (stream CustomerSummary) {
    option (akkaserverless.method).view.query = {
      query: "SELECT customer_id AS id, name FROM customers WHERE name = :customer_name"
    };
  }

  rpc UpdateCustomer(domain.CustomerState) returns (domain.CustomerState) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "customers"
    };
    option (akkaserverless.method).view.update = {
      table: "customers"
    };
  }
}
// end::summary[]

// tag::wrap-repeated[]
message CustomersResponse {
  repeated domain.CustomerState results = 1; // <1>
}

service CustomersResponseByName {
  rpc GetCustomers(ByNameRequest) returns (CustomersResponse) { // <2>
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS results FROM customers WHERE name = :customer_name" // <3>
    };
  }

  rpc UpdateCustomer(domain.CustomerState) returns (domain.CustomerState) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "customers"
    };
    option (akkaserverless.method).view.update = {
      table: "customers"
    };
  }
}
// end::wrap-repeated[]

// tag::service-event-sourced[]
service CustomerByNameView {
  rpc ProcessCustomerCreated(domain.CustomerCreated) returns (domain.CustomerState) { // <1>
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "customers" // <2>
    };
    option (akkaserverless.method).view.update = {
      table: "customers"
      transform_updates: true // <3>
    };
  }

  rpc ProcessCustomerNameChanged(domain.CustomerNameChanged) returns (domain.CustomerState) { // <4>
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "customers" // <5>
    };
    option (akkaserverless.method).view.update = {
      table: "customers"
      transform_updates: true // <6>
    };
  }

  rpc GetCustomers(ByNameRequest) returns (stream domain.CustomerState) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * FROM customers WHERE name = :customer_name"
    };
  }
}
// end::service-event-sourced[]

// tag::service-topic[]
service CustomerByNameViewFromTopic {
  rpc ProcessCustomerCreated(domain.CustomerCreated) returns (domain.CustomerState) {
    option (akkaserverless.method).eventing.in = {
      topic: "customers" // <1>
    };
    option (akkaserverless.method).view.update = {
      table: "customers"
      transform_updates: true
    };
  }

  rpc ProcessCustomerNameChanged(domain.CustomerNameChanged) returns (domain.CustomerState) {
    option (akkaserverless.method).eventing.in = {
      topic: "customers"
    };
    option (akkaserverless.method).view.update = {
      table: "customers"
      transform_updates: true
    };
  }

  rpc GetCustomers(ByNameRequest) returns (stream domain.CustomerState) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * FROM customers WHERE name = :customer_name"
    };
  }
}
// end::service-topic[]
